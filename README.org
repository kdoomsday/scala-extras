#+TITLE: scala-extras layer
# Document tags are separated with "|" char
# The example below contains 2 tags: "layer" and "web service"
# Avaliable tags are listed in <spacemacs_root>/.ci/spacedoc-cfg.edn
# under ":spacetools.spacedoc.config/valid-tags" section.
#+TAGS: layer|web service

# TOC links should be GitHub style anchors.
* Table of Contents                                        :TOC_4_gh:noexport:
- [[#description][Description]]
  - [[#features][Features:]]
    - [[#ob-scala][=ob-scala=]]
      - [[#header-arguments][Header arguments]]
      - [[#eval-type][Eval Type]]
- [[#install][Install]]

* Description
This layer adds support for running scala code directly through =scala-cli=.

** Features:
  - Run scala scripts directly via =scala-cli=
  - Enable =ob-scala= so you can evaluate org src blocks with =scala-cli=

The main functions to be aware of are ~scala-extras-execute~ and
~scala-extras-execute-directory~. Both also have ~-and-switch~ versions that
switch to the output buffer.

All modes depend on the variable ~scala-extras-output-buffer-name~, which is the
buffer name to use for output. The buffer will be created if it does not exist.

The first mode, ~scala-extras-execute~, runs the selected region (or full buffer
if no region) and sends the output to the output buffer. The second,
~scala-extras-execute-directory~, gets the directory of the active buffer and
sends that to scala-cli, to run as a project.

| Function                                    | Description                                             |
|---------------------------------------------+---------------------------------------------------------|
| scala-extras-execute                        | Execute buffer or region                                |
| scala-extras-execute-and-switch             | Execute buffer or region and switch to output buffer    |
| scala-extras-execute-to-clipboard           | Execute buffer or region and copy output to clipboard   |
|---------------------------------------------+---------------------------------------------------------|
| scala-extras-execute-directory              | Execute buffer's directory as a scala-cli project       |
| scala-extras-execute-directory-and-switch   | Execute buffer's directory and switch to output buffer  |
| scala-extras-execute-directory-to-clipboard | Execute buffer's directory and copy output to clibboard |

*** =ob-scala=
To enable Scala in Org Mode source blocks add the language to org initialization:
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((scala . t) ... ))
#+end_src

Or you can load immediately:
#+begin_src elisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               (append org-babel-load-languages '((scala . t)))
#+end_src


**** Header arguments
| :verbose     | Run scala-cli with '--verbose'. Default is '-q'                   |
| :log-command | Log the run command and all source to Messages buffer             |
| :eval-type   | If "source", run snippet as a source file instead of as a scriptt |
| :options     | Pass additional options to scala-cli when running                 |

**** Eval Type
Setting =:eval-type source= will make the block be evaluated as a source file
instead of as a script. This means your code has to be wrapped in some sort of
~main~ function for it to run properly.

This is useful, for instance, when evaluating different main runners, which
don't work on script files. For example, ~IOApp~ from =Cats= or ~ZIOApp~ from
=ZIO=.

Any other =eval-type= will be treated as the default, which is to evaluate as a
script.

* Install
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =scala-extras= to the existing =dotspacemacs-configuration-layers= list in this
file.
